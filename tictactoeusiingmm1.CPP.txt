#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
char player='x',opponent='o';
struct Move
{
 int r,c;
};
 bool isMovesLeft(char board[3][3])
 {
  for(int i=0;i<3;i++)
   for(int j=0;j<3;j++)
    if(board[i][j]=='_')
     return true;
  return false;
 }
 int evaluate(char b[3][3])
 {
  for(int row=0;row<3;row++)
   {
    if(b[row][0]==b[row][1] && b[row][1]==b[row][2])
    {
     if(b[row][0]==player)
      return +10;
     else if(b[row][0]==opponent)
      return -10;
    }
   }
   for(int col=0;col<3;col++)
   {
    if(b[0][col]==b[2][col] && b[1][col]==b[2][col])
    {
     if(b[0][col]==player)
      return +10;
     else if(b[0][col]==opponent)
      return -10;
    }
   }
   if(b[0][0]==b[1][1] && b[1][1]==b[2][2])
   {
    if(b[0][0]==player)
     return +10;
    else if(b[0][0]==opponent)
     return -10;
   }
   if(b[0][2]==b[1][1] && b[1][1]==b[2][0])
   {
    if(b[0][2]==player)
     return +10;
    else if(b[0][2]==opponent)
     return -10;
   }
   return 0;
 }
 int minimax(char board[3][3],int depth,bool isMax)
 {
  int score =evaluate(board);
  if(score==10)
   return score;

  if(score==-10)
   return score;

  if(isMovesLeft(board)==false)
   return 0;

  if(isMax)
  {
   int best=-1000;
   for(int i=0;i<3;i++)
   {
    for(int j=0;j<3;j++)
    {
     if(board[i][j]=='_')
     {
      board[i][j]=player;
      best=max(best,minimax(board,depth+1,!isMax));
      board[i][j]='_';
     }
    }
   }
   return best;
  }
  else
  {
   int best=1000;
   for(int i=0;i<3;i++)
   {
    for(int j=0;j<3;j++)
    {
     if(board[i][j]=='_')
     {
      board[i][j]=opponent;
      best=min(best,minimax(board,depth+1,!isMax));
      board[i][j]='_';
     }
    }
   }
   return best;
  }
 }
 Move findBestMove(char board[3][3])
 {
  int bestval=-1000;
  Move bestmove;
  bestmove.r=-1;
  bestmove.c=-1;
  for(int i=0;i<3;i++)
   {
    for(int j=0;j<3;j++)
    {
     if(board[i][j]=='_')
     {
      board[i][j]=player;
      int moveval=minimax(board,0,false);
      board[i][j]='_';
     if(moveval>bestval)
     {
      bestmove.r=i;
      bestmove.c=j;
      bestval=moveval;
     }
    }
   }
  }
  cout<<"The Value of the best Move is:"<<bestval;
  return bestmove;
 }
 int main()
 {
  char board[3][3]=
  {
   {'o','o','_'},
   {'_','x','_'},
   {'x','o','x'}
  };
  Move bestmove=findBestMove(board);
  cout<<"\n\nRow: "<<bestmove.r<<" COL: "<<bestmove.c;
  getch();
 }